// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  purpose       String?
  gmailEmail    String?
  gmailPassword String?   // This will be encrypted
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  emailLogs     EmailLog[]
  campaigns     Campaign[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  name        String
  subject     String
  template    String
  totalRecipients Int
  sentCount   Int      @default(0)
  failedCount Int      @default(0)
  status      String   // 'draft', 'sending', 'completed', 'failed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients  CampaignRecipient[]
  emailLogs   EmailLog[]
}

model CampaignRecipient {
  id          String   @id @default(cuid())
  campaignId  String
  email       String
  name        String?
  customData  String?  // JSON string for additional data
  status      String   // 'pending', 'sent', 'failed'
  sentAt      DateTime?
  error       String?
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model EmailLog {
  id          String   @id @default(cuid())
  userId      String
  campaignId  String?
  subject     String
  recipientEmail String
  status      String   // 'sent', 'failed'
  error       String?
  sentAt      DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign    Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
}